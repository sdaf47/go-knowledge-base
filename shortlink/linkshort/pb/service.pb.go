// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	EncodeRequest
	EncodeReply
	DecodeRequest
	DecodeReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncodeRequest struct {
	Link string `protobuf:"bytes,1,opt,name=Link" json:"Link,omitempty"`
}

func (m *EncodeRequest) Reset()                    { *m = EncodeRequest{} }
func (m *EncodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EncodeRequest) ProtoMessage()               {}
func (*EncodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EncodeRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type EncodeReply struct {
	Code   string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=Status" json:"Status,omitempty"`
}

func (m *EncodeReply) Reset()                    { *m = EncodeReply{} }
func (m *EncodeReply) String() string            { return proto.CompactTextString(m) }
func (*EncodeReply) ProtoMessage()               {}
func (*EncodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncodeReply) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *EncodeReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EncodeReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DecodeRequest struct {
	Code string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
}

func (m *DecodeRequest) Reset()                    { *m = DecodeRequest{} }
func (m *DecodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DecodeRequest) ProtoMessage()               {}
func (*DecodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DecodeRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type DecodeReply struct {
	Link   string `protobuf:"bytes,1,opt,name=Link" json:"Link,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=Status" json:"Status,omitempty"`
}

func (m *DecodeReply) Reset()                    { *m = DecodeReply{} }
func (m *DecodeReply) String() string            { return proto.CompactTextString(m) }
func (*DecodeReply) ProtoMessage()               {}
func (*DecodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DecodeReply) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *DecodeReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DecodeReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*EncodeRequest)(nil), "pb.EncodeRequest")
	proto.RegisterType((*EncodeReply)(nil), "pb.EncodeReply")
	proto.RegisterType((*DecodeRequest)(nil), "pb.DecodeRequest")
	proto.RegisterType((*DecodeReply)(nil), "pb.DecodeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShortLinkService service

type ShortLinkServiceClient interface {
	Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeReply, error)
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeReply, error)
}

type shortLinkServiceClient struct {
	cc *grpc.ClientConn
}

func NewShortLinkServiceClient(cc *grpc.ClientConn) ShortLinkServiceClient {
	return &shortLinkServiceClient{cc}
}

func (c *shortLinkServiceClient) Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeReply, error) {
	out := new(EncodeReply)
	err := grpc.Invoke(ctx, "/pb.ShortLinkService/Encode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeReply, error) {
	out := new(DecodeReply)
	err := grpc.Invoke(ctx, "/pb.ShortLinkService/Decode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShortLinkService service

type ShortLinkServiceServer interface {
	Encode(context.Context, *EncodeRequest) (*EncodeReply, error)
	Decode(context.Context, *DecodeRequest) (*DecodeReply, error)
}

func RegisterShortLinkServiceServer(s *grpc.Server, srv ShortLinkServiceServer) {
	s.RegisterService(&_ShortLinkService_serviceDesc, srv)
}

func _ShortLinkService_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShortLinkService/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).Encode(ctx, req.(*EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShortLinkService/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShortLinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShortLinkService",
	HandlerType: (*ShortLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _ShortLinkService_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _ShortLinkService_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe6,
	0xe2, 0x75, 0xcd, 0x4b, 0xce, 0x4f, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12,
	0xe2, 0x62, 0xf1, 0xc9, 0xcc, 0xcb, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95,
	0xfc, 0xb9, 0xb8, 0x61, 0x8a, 0x0a, 0x72, 0x2a, 0x41, 0x4a, 0x9c, 0xf3, 0x53, 0x52, 0x61, 0x4a,
	0x40, 0x6c, 0x21, 0x11, 0x2e, 0x56, 0xd7, 0xa2, 0xa2, 0xfc, 0x22, 0x09, 0x26, 0xb0, 0x20, 0x84,
	0x23, 0x24, 0xc6, 0xc5, 0x16, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x2c, 0xc1, 0x0c, 0x16, 0x86, 0xf2,
	0x40, 0xb6, 0xba, 0xa4, 0xa2, 0xd9, 0x8a, 0x6e, 0x24, 0xc8, 0x56, 0x98, 0x22, 0xa8, 0xad, 0xe8,
	0x0e, 0x23, 0xcd, 0x56, 0xa3, 0x22, 0x2e, 0x81, 0xe0, 0x8c, 0xfc, 0xa2, 0x12, 0x90, 0xd6, 0x60,
	0x48, 0x48, 0x08, 0xe9, 0x71, 0xb1, 0x41, 0xbc, 0x26, 0x24, 0xa8, 0x57, 0x90, 0xa4, 0x87, 0x12,
	0x16, 0x52, 0xfc, 0xc8, 0x42, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x20, 0xf5, 0x10, 0x47, 0x41, 0xd4,
	0xa3, 0xf8, 0x02, 0xa2, 0x1e, 0xc9, 0xcd, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0xa0, 0x36, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xc4, 0xc4, 0xf4, 0x82, 0x7b, 0x01, 0x00, 0x00,
}
